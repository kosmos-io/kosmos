/*
Copyright The Kosmos Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kosmos.io/kosmos/pkg/apis/kosmos/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VirtualClusterPluginLister helps list VirtualClusterPlugins.
// All objects returned here must be treated as read-only.
type VirtualClusterPluginLister interface {
	// List lists all VirtualClusterPlugins in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VirtualClusterPlugin, err error)
	// VirtualClusterPlugins returns an object that can list and get VirtualClusterPlugins.
	VirtualClusterPlugins(namespace string) VirtualClusterPluginNamespaceLister
	VirtualClusterPluginListerExpansion
}

// virtualClusterPluginLister implements the VirtualClusterPluginLister interface.
type virtualClusterPluginLister struct {
	indexer cache.Indexer
}

// NewVirtualClusterPluginLister returns a new VirtualClusterPluginLister.
func NewVirtualClusterPluginLister(indexer cache.Indexer) VirtualClusterPluginLister {
	return &virtualClusterPluginLister{indexer: indexer}
}

// List lists all VirtualClusterPlugins in the indexer.
func (s *virtualClusterPluginLister) List(selector labels.Selector) (ret []*v1alpha1.VirtualClusterPlugin, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VirtualClusterPlugin))
	})
	return ret, err
}

// VirtualClusterPlugins returns an object that can list and get VirtualClusterPlugins.
func (s *virtualClusterPluginLister) VirtualClusterPlugins(namespace string) VirtualClusterPluginNamespaceLister {
	return virtualClusterPluginNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VirtualClusterPluginNamespaceLister helps list and get VirtualClusterPlugins.
// All objects returned here must be treated as read-only.
type VirtualClusterPluginNamespaceLister interface {
	// List lists all VirtualClusterPlugins in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VirtualClusterPlugin, err error)
	// Get retrieves the VirtualClusterPlugin from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.VirtualClusterPlugin, error)
	VirtualClusterPluginNamespaceListerExpansion
}

// virtualClusterPluginNamespaceLister implements the VirtualClusterPluginNamespaceLister
// interface.
type virtualClusterPluginNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VirtualClusterPlugins in the indexer for a given namespace.
func (s virtualClusterPluginNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.VirtualClusterPlugin, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VirtualClusterPlugin))
	})
	return ret, err
}

// Get retrieves the VirtualClusterPlugin from the indexer for a given namespace and name.
func (s virtualClusterPluginNamespaceLister) Get(name string) (*v1alpha1.VirtualClusterPlugin, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("virtualclusterplugin"), name)
	}
	return obj.(*v1alpha1.VirtualClusterPlugin), nil
}
